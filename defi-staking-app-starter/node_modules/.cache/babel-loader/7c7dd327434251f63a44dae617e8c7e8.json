{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport Navigation from './Navigation';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/Rwd.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\nimport Loader from './Loader';\nexport var AIRDROPTIME = 5;\n\nvar App = function App() {\n  var _useState = useState('0x0000000000000000000000000000000000000000'),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tether = _useState4[0],\n      setTether = _useState4[1];\n\n  var _useState5 = useState('0'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tetherBalance = _useState6[0],\n      setTetherBalance = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rwd = _useState8[0],\n      setRwd = _useState8[1];\n\n  var _useState9 = useState('0'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rwdBalance = _useState10[0],\n      setRwdBalance = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      decentralBank = _useState12[0],\n      setDecentralBank = _useState12[1];\n\n  var _useState13 = useState('0'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      stakingBalance = _useState14[0],\n      setStakingBalance = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isSwitch = _useState16[0],\n      setIsSwitch = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      loading = _useState18[0],\n      setLoading = _useState18[1];\n\n  var _useState19 = useState(AIRDROPTIME),\n      _useState20 = _slicedToArray(_useState19, 2),\n      airdropTime = _useState20[0],\n      setAirdropTime = _useState20[1];\n\n  useEffect(function () {\n    var loadWeb3 = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var networkId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context.next = 13;\n                break;\n\n              case 6:\n                if (!window.web3) {\n                  _context.next = 10;\n                  break;\n                }\n\n                window.web3 = new Web3(window.web3.currentProvider);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return window.web3.eth.net.getId();\n\n              case 12:\n                networkId = _context.sent;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadWeb3() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadWeb3();\n  }, []);\n  useEffect(function () {\n    var loadBlockchainData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId, tetherData, _tether, _tetherBalance, rwdData, _rwd, _rwdBalance, decentralBankData, _decentralBank, _stakingBalance;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                setAccount(accounts[0]);\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                // Load Tether contract\n                tetherData = Tether.networks[networkId];\n\n                if (!tetherData) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                setTether(_tether);\n                _context2.next = 14;\n                return _tether.methods.balanceOf(account).call();\n\n              case 14:\n                _tetherBalance = _context2.sent;\n                setTetherBalance(_tetherBalance.toString());\n                _context2.next = 18;\n                break;\n\n              case 18:\n                // Load Rwd contract\n                rwdData = Rwd.networks[networkId];\n\n                if (!rwdData) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                _rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                setRwd(_rwd);\n                _context2.next = 24;\n                return _rwd.methods.balanceOf(account).call();\n\n              case 24:\n                _rwdBalance = _context2.sent;\n                setRwdBalance(_rwdBalance.toString());\n                _context2.next = 28;\n                break;\n\n              case 28:\n                // Load DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context2.next = 38;\n                  break;\n                }\n\n                _decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                setDecentralBank(_decentralBank);\n                _context2.next = 34;\n                return _decentralBank.methods.stakingBalance(account).call();\n\n              case 34:\n                _stakingBalance = _context2.sent;\n                setStakingBalance(_stakingBalance.toString());\n                _context2.next = 38;\n                break;\n\n              case 38:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function loadBlockchainData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    loadBlockchainData();\n    setLoading(false);\n  }, [loading, account, stakingBalance, rwdBalance, tetherBalance]); // two functions: one that stakes, one that withdraws\n  // leverage our decentralBank contract - deposit tokens and unstaking\n  // FOR STAKING:\n  // -> depositTokens transferFrom\n  // -> function approve the transation hash ----\n  // -> STAKING FUNCTION ?? >> decentralBank.depositTokens(send transaction)\n  // staking function\n\n  var stakeTokens = function stakeTokens(amount) {\n    setLoading(true);\n    tether.methods.approve(decentralBank._address, amount).send({\n      from: account\n    }).on('transactionHash', function (hash) {\n      decentralBank.methods.depositTokens(amount).send({\n        from: account\n      }).on('transactionHash', function (hash) {\n        setLoading(false);\n      });\n    });\n  }; // withdraw function\n\n\n  var withdrawTokens = function withdrawTokens() {\n    setLoading(true);\n    decentralBank.methods.unstakeTokens().send({\n      from: account\n    }).on('transactionHash', function (hash) {\n      setLoading(false);\n    });\n  }; // issue reward tokens\n\n\n  var issueRewardTokens = function issueRewardTokens() {\n    rwd.methods.issueTokens().send({\n      from: account\n    }).on('transactionHash', function (hash) {\n      setAirdropTime(AIRDROPTIME);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navigation, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(Main, {\n    tetherBalance: tetherBalance,\n    rwdBalance: rwdBalance,\n    stakingBalance: stakingBalance,\n    stakeTokens: stakeTokens,\n    withdrawTokens: withdrawTokens,\n    airdropTime: airdropTime,\n    setAirdropTime: setAirdropTime,\n    issueRewardTokens: issueRewardTokens,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/DEV/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useEffect","useState","Navigation","Web3","Tether","Rwd","DecentralBank","Main","Loader","AIRDROPTIME","App","account","setAccount","tether","setTether","tetherBalance","setTetherBalance","rwd","setRwd","rwdBalance","setRwdBalance","decentralBank","setDecentralBank","stakingBalance","setStakingBalance","isSwitch","setIsSwitch","loading","setLoading","airdropTime","setAirdropTime","loadWeb3","window","ethereum","web3","enable","currentProvider","eth","net","getId","networkId","loadBlockchainData","getAccounts","accounts","tetherData","networks","Contract","abi","address","methods","balanceOf","call","toString","rwdData","decentralBankData","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","withdrawTokens","unstakeTokens","issueRewardTokens","issueTokens"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\nimport Rwd from '../truffle_abis/Rwd.json';\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\r\nimport Main from './Main';\r\nimport Loader from './Loader';\r\n\r\nexport const AIRDROPTIME = 5;\r\nconst App = () => {\r\n    const [account, setAccount] = useState('0x0000000000000000000000000000000000000000');\r\n    const [tether, setTether] = useState({});\r\n    const [tetherBalance, setTetherBalance] = useState('0');\r\n    const [rwd, setRwd] = useState({});\r\n    const [rwdBalance, setRwdBalance] = useState('0');\r\n    const [decentralBank, setDecentralBank] = useState({});\r\n    const [stakingBalance, setStakingBalance] = useState('0');\r\n    const [isSwitch, setIsSwitch] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [airdropTime, setAirdropTime] = useState(AIRDROPTIME);\r\n\r\n    useEffect(() => {\r\n        const loadWeb3 = async () => {\r\n            if(window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum);\r\n                await window.ethereum.enable();\r\n            } else if(window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider);\r\n            } else {\r\n                const networkId = await window.web3.eth.net.getId();\r\n                // if(networkId !== 5777) {\r\n                //     // window.alert('No ethereum browser detected. Please install MetaMask.');\r\n                // } else {\r\n                //     // window.alert('Switch network')\r\n                // }\r\n            }\r\n        }\r\n\r\n        loadWeb3();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const loadBlockchainData = async () => {\r\n            const web3 = window.web3;\r\n            const accounts = await web3.eth.getAccounts();\r\n            setAccount(accounts[0]);\r\n            const networkId = await web3.eth.net.getId();\r\n\r\n            // Load Tether contract\r\n            const tetherData = Tether.networks[networkId];\r\n            if(tetherData) {\r\n                const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n                setTether(tether);\r\n                let tetherBalance = await tether.methods.balanceOf(account).call();\r\n                setTetherBalance(tetherBalance.toString());\r\n            } else {\r\n                // window.alert('Tether contract not deployed to this network.');\r\n            }\r\n\r\n            // Load Rwd contract\r\n            const rwdData = Rwd.networks[networkId];\r\n            if(rwdData) {\r\n                const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\r\n                setRwd(rwd);\r\n                let rwdBalance = await rwd.methods.balanceOf(account).call();\r\n                setRwdBalance(rwdBalance.toString());\r\n            } else {\r\n                // window.alert('Rwd contract not deployed to this network.');\r\n            }\r\n\r\n            // Load DecentralBank contract\r\n            const decentralBankData = DecentralBank.networks[networkId];\r\n            if(decentralBankData) {\r\n                const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\r\n                setDecentralBank(decentralBank);\r\n                let stakingBalance = await decentralBank.methods.stakingBalance(account).call();\r\n                setStakingBalance(stakingBalance.toString());\r\n            } else {\r\n                // window.alert('DecentralBank contract not deployed to this network.');\r\n            }\r\n        }\r\n\r\n        loadBlockchainData();\r\n        setLoading(false);\r\n    }, [loading, account, stakingBalance, rwdBalance, tetherBalance]);\r\n\r\n    // two functions: one that stakes, one that withdraws\r\n    // leverage our decentralBank contract - deposit tokens and unstaking\r\n    // FOR STAKING:\r\n    // -> depositTokens transferFrom\r\n    // -> function approve the transation hash ----\r\n    // -> STAKING FUNCTION ?? >> decentralBank.depositTokens(send transaction)\r\n\r\n    // staking function\r\n    const stakeTokens = (amount) => {\r\n        setLoading(true);\r\n        tether.methods.approve(decentralBank._address, amount).send({from: account})\r\n            .on('transactionHash', (hash) => {\r\n                decentralBank.methods.depositTokens(amount).send({from: account})\r\n                    .on('transactionHash', (hash) => {\r\n                        setLoading(false);\r\n                    })\r\n                });\r\n    }\r\n\r\n    // withdraw function\r\n    const withdrawTokens = () => {\r\n        setLoading(true);\r\n        decentralBank.methods.unstakeTokens().send({from: account})\r\n            .on('transactionHash', (hash) => {\r\n                setLoading(false);\r\n            })\r\n    }\r\n\r\n    // issue reward tokens\r\n    const issueRewardTokens = () => {\r\n        rwd.methods.issueTokens().send({from: account})\r\n            .on('transactionHash', (hash) => {\r\n                setAirdropTime(AIRDROPTIME);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation account={account} />\r\n            {loading ? <Loader /> :\r\n                <Main\r\n                    tetherBalance={tetherBalance}\r\n                    rwdBalance={rwdBalance}\r\n                    stakingBalance={stakingBalance}\r\n                    stakeTokens={stakeTokens}\r\n                    withdrawTokens={withdrawTokens}\r\n                    airdropTime={airdropTime}\r\n                    setAirdropTime={setAirdropTime}\r\n                    issueRewardTokens={issueRewardTokens}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}