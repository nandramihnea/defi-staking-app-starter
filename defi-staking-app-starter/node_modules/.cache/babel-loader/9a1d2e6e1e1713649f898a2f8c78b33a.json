{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\WEB DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\WEB DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\WEB DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\WEB DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport Navigation from './Navigation';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/Rwd.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\n\nvar App = function App() {\n  var _useState = useState('0x0000000000000000000000000000000000000000'),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tether = _useState4[0],\n      setTether = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tetherBalance = _useState6[0],\n      setTetherBalance = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rwd = _useState8[0],\n      setRwd = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rwdBalance = _useState10[0],\n      setRwdBalance = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      decentralBank = _useState12[0],\n      setDecentralBank = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      stakingBalance = _useState14[0],\n      setStakingBalance = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      loading = _useState16[0],\n      setLoading = _useState16[1];\n\n  useEffect(function () {\n    var loadWeb3 = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('No ethereum browser detected. Please install MetaMask.');\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadWeb3() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadWeb3();\n  }, []);\n  useEffect(function () {\n    var loadBlockchainData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, account, networkId, tetherData, _tether, _tetherBalance, rwdData, _rwd, _rwdBalance, decentralBankData, _decentralBank, _stakingBalance;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context2.sent;\n                setAccount(account[0]);\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                console.log('networkId: ', networkId); // Load Tether contract\n\n                tetherData = Tether.networks[networkId];\n                console.log('tetherData: ', tetherData);\n\n                if (!tetherData) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                setTether(_tether);\n                _context2.next = 16;\n                return _tether.methods.balanceOf(account[0]).call();\n\n              case 16:\n                _tetherBalance = _context2.sent;\n                setTetherBalance(_tetherBalance.toString());\n                _context2.next = 21;\n                break;\n\n              case 20:\n                window.alert('Tether contract not deployed to this network.');\n\n              case 21:\n                // Load Rwd contract\n                rwdData = Rwd.networks[networkId];\n\n                if (!rwdData) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                _rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                setRwd(_rwd);\n                _context2.next = 27;\n                return _rwd.methods.balanceOf(account[0]).call();\n\n              case 27:\n                _rwdBalance = _context2.sent;\n                setRwdBalance(_rwdBalance.toString());\n                _context2.next = 32;\n                break;\n\n              case 31:\n                window.alert('Rwd contract not deployed to this network.');\n\n              case 32:\n                // Load DecentralBank contract\n                decentralBankData = DecentralBank.networks[networkId];\n\n                if (!decentralBankData) {\n                  _context2.next = 42;\n                  break;\n                }\n\n                _decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                setDecentralBank(_decentralBank);\n                _context2.next = 38;\n                return _decentralBank.methods.stakingBalance(account[0]).call();\n\n              case 38:\n                _stakingBalance = _context2.sent;\n                setStakingBalance(_stakingBalance.toString());\n                _context2.next = 43;\n                break;\n\n              case 42:\n                window.alert('DecentralBank contract not deployed to this network.');\n\n              case 43:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function loadBlockchainData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    loadBlockchainData();\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navigation, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/WEB DEV/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useEffect","useState","Navigation","Web3","Tether","Rwd","DecentralBank","Main","App","account","setAccount","tether","setTether","tetherBalance","setTetherBalance","rwd","setRwd","rwdBalance","setRwdBalance","decentralBank","setDecentralBank","stakingBalance","setStakingBalance","loading","setLoading","loadWeb3","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","eth","getAccounts","net","getId","networkId","console","log","tetherData","networks","Contract","abi","address","methods","balanceOf","call","toString","rwdData","decentralBankData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\nimport Rwd from '../truffle_abis/Rwd.json';\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\r\nimport Main from './Main';\r\n\r\nconst App = () => {\r\n    const [account, setAccount] = useState('0x0000000000000000000000000000000000000000');\r\n    const [tether, setTether] = useState({});\r\n    const [tetherBalance, setTetherBalance] = useState(0);\r\n    const [rwd, setRwd] = useState({});\r\n    const [rwdBalance, setRwdBalance] = useState(0);\r\n    const [decentralBank, setDecentralBank] = useState({});\r\n    const [stakingBalance, setStakingBalance] = useState(0);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const loadWeb3 = async () => {\r\n            if(window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum);\r\n                await window.ethereum.enable();\r\n            } else if(window.web3) {\r\n                    window.web3 = new Web3(window.web3.currentProvider);\r\n            } else {\r\n\r\n                window.alert('No ethereum browser detected. Please install MetaMask.');\r\n            }\r\n        }\r\n\r\n        loadWeb3();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const loadBlockchainData = async () => {\r\n            const web3 = window.web3;\r\n            const account = await web3.eth.getAccounts();\r\n            setAccount(account[0]);\r\n            const networkId = await web3.eth.net.getId();\r\n            console.log('networkId: ', networkId);\r\n\r\n            // Load Tether contract\r\n            const tetherData = Tether.networks[networkId];\r\n            console.log('tetherData: ', tetherData);\r\n            if(tetherData) {\r\n                const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n                setTether(tether);\r\n                let tetherBalance = await tether.methods.balanceOf(account[0]).call();\r\n                setTetherBalance(tetherBalance.toString());\r\n            } else {\r\n                window.alert('Tether contract not deployed to this network.');\r\n            }\r\n\r\n            // Load Rwd contract\r\n            const rwdData = Rwd.networks[networkId];\r\n            if(rwdData) {\r\n                const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\r\n                setRwd(rwd);\r\n                let rwdBalance = await rwd.methods.balanceOf(account[0]).call();\r\n                setRwdBalance(rwdBalance.toString());\r\n            } else {\r\n                window.alert('Rwd contract not deployed to this network.');\r\n            }\r\n\r\n            // Load DecentralBank contract\r\n            const decentralBankData = DecentralBank.networks[networkId];\r\n            if(decentralBankData) {\r\n                const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\r\n                setDecentralBank(decentralBank);\r\n                let stakingBalance = await decentralBank.methods.stakingBalance(account[0]).call();\r\n                setStakingBalance(stakingBalance.toString());\r\n            } else {\r\n                window.alert('DecentralBank contract not deployed to this network.');\r\n            }\r\n        }\r\n\r\n        loadBlockchainData();\r\n        setLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Navigation account={account} />\r\n            <Main />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}