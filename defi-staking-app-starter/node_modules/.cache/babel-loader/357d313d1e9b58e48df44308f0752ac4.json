{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\DEV\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport Navigation from './Navigation';\nimport Web3 from 'web3';\nimport Tether from '../truffle_abis/Tether.json';\nimport Rwd from '../truffle_abis/Rwd.json';\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\nimport Main from './Main';\nimport Loader from './Loader';\n\nvar App = function App() {\n  var _useState = useState('0x0000000000000000000000000000000000000000'),\n      _useState2 = _slicedToArray(_useState, 2),\n      account = _useState2[0],\n      setAccount = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tether = _useState4[0],\n      setTether = _useState4[1];\n\n  var _useState5 = useState('0'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tetherBalance = _useState6[0],\n      setTetherBalance = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rwd = _useState8[0],\n      setRwd = _useState8[1];\n\n  var _useState9 = useState('0'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      rwdBalance = _useState10[0],\n      setRwdBalance = _useState10[1];\n\n  var _useState11 = useState({}),\n      _useState12 = _slicedToArray(_useState11, 2),\n      decentralBank = _useState12[0],\n      setDecentralBank = _useState12[1];\n\n  var _useState13 = useState('0'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      stakingBalance = _useState14[0],\n      setStakingBalance = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isSwitch = _useState16[0],\n      setIsSwitch = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      loading = _useState18[0],\n      setLoading = _useState18[1];\n\n  useEffect(function () {\n    var loadWeb3 = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var networkId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context.next = 14;\n                break;\n\n              case 6:\n                if (!window.web3) {\n                  _context.next = 10;\n                  break;\n                }\n\n                window.web3 = new Web3(window.web3.currentProvider);\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return window.web3.eth.net.getId();\n\n              case 12:\n                networkId = _context.sent;\n\n                if (networkId !== 5777) {// window.alert('No ethereum browser detected. Please install MetaMask.');\n                } else {// window.alert('Switch network')\n                  }\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function loadWeb3() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    loadWeb3();\n  }, []);\n  useEffect(function () {\n    var loadBlockchainData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, networkId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                setAccount(accounts[0]);\n                _context2.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context2.sent;\n                console.log('networkId: ', networkId); // // Load Tether contract\n                // const tetherData = Tether.networks[networkId];\n                // console.log('tetherData: ', tetherData);\n                // if(tetherData) {\n                //     const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                //     setTether(tether);\n                //     let tetherBalance = await tether.methods.balanceOf(account).call();\n                //     console.log('tetherBalance: ', tetherBalance);\n                //     setTetherBalance(tetherBalance.toString());\n                // } else {\n                //     window.alert('Tether contract not deployed to this network.');\n                // }\n                // // Load Rwd contract\n                // const rwdData = Rwd.networks[networkId];\n                // console.log('rwdData: ', rwdData);\n                // if(rwdData) {\n                //     const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\n                //     setRwd(rwd);\n                //     let rwdBalance = await rwd.methods.balanceOf(account).call();\n                //     setRwdBalance(rwdBalance.toString());\n                // } else {\n                //     window.alert('Rwd contract not deployed to this network.');\n                // }\n                // // Load DecentralBank contract\n                // const decentralBankData = DecentralBank.networks[networkId];\n                // console.log('decentralBankData: ', decentralBankData);\n                // if(decentralBankData) {\n                //     const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n                //     setDecentralBank(decentralBank);\n                //     let stakingBalance = await decentralBank.methods.stakingBalance(account).call();\n                //     setStakingBalance(stakingBalance.toString());\n                // } else {\n                //     // window.alert('DecentralBank contract not deployed to this network.');\n                // }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function loadBlockchainData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    loadBlockchainData();\n    setLoading(false);\n  }, [loading]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navigation, {\n    account: account,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(Main, {\n    tetherBalance: tetherBalance,\n    rwdBalance: rwdBalance,\n    stakingBalance: stakingBalance,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["D:/DEV/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","useEffect","useState","Navigation","Web3","Tether","Rwd","DecentralBank","Main","Loader","App","account","setAccount","tether","setTether","tetherBalance","setTetherBalance","rwd","setRwd","rwdBalance","setRwdBalance","decentralBank","setDecentralBank","stakingBalance","setStakingBalance","isSwitch","setIsSwitch","loading","setLoading","loadWeb3","window","ethereum","web3","enable","currentProvider","eth","net","getId","networkId","loadBlockchainData","getAccounts","accounts","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Web3 from 'web3';\r\nimport Tether from '../truffle_abis/Tether.json';\r\nimport Rwd from '../truffle_abis/Rwd.json';\r\nimport DecentralBank from '../truffle_abis/DecentralBank.json';\r\nimport Main from './Main';\r\nimport Loader from './Loader';\r\n\r\nconst App = () => {\r\n    const [account, setAccount] = useState('0x0000000000000000000000000000000000000000');\r\n    const [tether, setTether] = useState({});\r\n    const [tetherBalance, setTetherBalance] = useState('0');\r\n    const [rwd, setRwd] = useState({});\r\n    const [rwdBalance, setRwdBalance] = useState('0');\r\n    const [decentralBank, setDecentralBank] = useState({});\r\n    const [stakingBalance, setStakingBalance] = useState('0');\r\n    const [isSwitch, setIsSwitch] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const loadWeb3 = async () => {\r\n            if(window.ethereum) {\r\n                window.web3 = new Web3(window.ethereum);\r\n                await window.ethereum.enable();\r\n            } else if(window.web3) {\r\n                window.web3 = new Web3(window.web3.currentProvider);\r\n            } else {\r\n                const networkId = await window.web3.eth.net.getId();\r\n                if(networkId !== 5777) {\r\n                    // window.alert('No ethereum browser detected. Please install MetaMask.');\r\n                } else {\r\n                    // window.alert('Switch network')\r\n                }\r\n            }\r\n        }\r\n\r\n        loadWeb3();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const loadBlockchainData = async () => {\r\n            const web3 = window.web3;\r\n            const accounts = await web3.eth.getAccounts();\r\n            setAccount(accounts[0]);\r\n            const networkId = await web3.eth.net.getId();\r\n            console.log('networkId: ', networkId);\r\n\r\n            // // Load Tether contract\r\n            // const tetherData = Tether.networks[networkId];\r\n            // console.log('tetherData: ', tetherData);\r\n            // if(tetherData) {\r\n            //     const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n            //     setTether(tether);\r\n            //     let tetherBalance = await tether.methods.balanceOf(account).call();\r\n            //     console.log('tetherBalance: ', tetherBalance);\r\n            //     setTetherBalance(tetherBalance.toString());\r\n            // } else {\r\n            //     window.alert('Tether contract not deployed to this network.');\r\n            // }\r\n\r\n            // // Load Rwd contract\r\n            // const rwdData = Rwd.networks[networkId];\r\n            // console.log('rwdData: ', rwdData);\r\n            // if(rwdData) {\r\n            //     const rwd = new web3.eth.Contract(Rwd.abi, rwdData.address);\r\n            //     setRwd(rwd);\r\n            //     let rwdBalance = await rwd.methods.balanceOf(account).call();\r\n            //     setRwdBalance(rwdBalance.toString());\r\n            // } else {\r\n            //     window.alert('Rwd contract not deployed to this network.');\r\n            // }\r\n\r\n            // // Load DecentralBank contract\r\n            // const decentralBankData = DecentralBank.networks[networkId];\r\n            // console.log('decentralBankData: ', decentralBankData);\r\n            // if(decentralBankData) {\r\n            //     const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\r\n            //     setDecentralBank(decentralBank);\r\n            //     let stakingBalance = await decentralBank.methods.stakingBalance(account).call();\r\n            //     setStakingBalance(stakingBalance.toString());\r\n            // } else {\r\n            //     // window.alert('DecentralBank contract not deployed to this network.');\r\n            // }\r\n        }\r\n\r\n        loadBlockchainData();\r\n        setLoading(false);\r\n    }, [loading]);\r\n\r\n    return (\r\n        <>\r\n            <Navigation account={account} />\r\n            {loading ? <Loader /> :\r\n                <Main\r\n                    tetherBalance={tetherBalance}\r\n                    rwdBalance={rwdBalance}\r\n                    stakingBalance={stakingBalance}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}